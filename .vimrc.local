color molokai
let g:spf13_keep_trailing_whitespace = 1
let g:airline_theme='badwolf'
let g:ctrlp_regexp = 1
let g:ag_working_path_mode="r"

" Tab madness
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

" This allows buffers to be hidden if you've modified a buffer.
" This is almost a must if you wish to use buffers in this way.
set hidden
" To open a new empty buffer
" This replaces :tabnew which I used to bind to this mapping
nmap <leader>T :enew<cr>
" Move to the next buffer
nmap <leader>l :bnext<CR>
" Move to the previous buffer
nmap <leader>h :bprevious<CR>
" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <leader>bq :bp <BAR> bd #<CR>
" Show all open buffers and their status
nmap <leader>bl :ls<CR>I
nmap <leader>w  :bw<CR>
nmap <leader>W  :bw!<CR>

" Setup some default ignores
 let g:ctrlp_custom_ignore = {
   \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
    \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
    \}

" Use the nearest .git directory as the cwd
" This makes a lot of sense if you are working on a project that is in
"     version
" control. It also supports works with .svn, .hg, .bzr.
let g:ctrlp_working_path_mode = 'r'

" Use a leader instead of the actual named binding
nmap <leader>p :CtrlP<cr>

" Easy bindings for its various modes
nmap <leader>bb :CtrlPBuffer<cr>
nmap <leader>bm :CtrlPMixed<cr>
nmap <leader>bs :CtrlPMRU<cr>

nmap <leader>ds :noh<CR>

nmap <leader>q" ciw""<Esc>P
nmap <leader>q' ciw''<Esc>P'"

" Called once right before you start selecting multiple cursors
function! Multiple_cursors_before()
if exists(':NeoCompleteLock')==2
    exe 'NeoCompleteLock'
endif
endfunction

" Called once only when the multiple selection is canceled (default <Esc>)
function! Multiple_cursors_after()
    if exists(':NeoCompleteUnlock')==2
        exe 'NeoCompleteUnlock'
    endif
endfunction

:let g:session_autosave = 'yes'
:let g:session_autoload = 'yes'

"Disabled arrow keys
inoremap <UP> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Right> <NOP>
noremap <Left> <NOP>


function! PullAndRefresh()
  set noconfirm
    !git pull
    bufdo e!
    set confirm
  endfun

nmap <leader>gr call PullAndRefresh()
let g:move_key_modifier = 'C'
